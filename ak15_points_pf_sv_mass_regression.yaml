treename:
    Events

selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    >
    (fj_pt>200) &
    (fj_pt<2500) &
    (fj_genjetmsd<260) &
    ( ( ( (fj_isQCDb==1) |
     (fj_isQCDbb==1) |
     (fj_isQCDc==1) |
     (fj_isQCDcc==1) |
     (fj_isQCDlep == 1) |
     (fj_isQCDothers == 1) ) & (fj_genRes_mass<0) ) |
     (fj_isTop == 1) |
     (fj_isToplep==1) |
     (( (fj_H_WW_4q==1) | (fj_H_WW_elenuqq==1) | (fj_H_WW_munuqq==1) | (fj_H_WW_taunuqq==1) ) &
     (fj_maxdR_HWW_daus<2.0) & (fj_nProngs>1) & (fj_genRes_mass>0) ) )


test_time_selection:
   >
    (fj_pt>200) &
    (fj_pt<1000) &
    ( ( ( (fj_isQCDb==1) |
     (fj_isQCDbb==1) |
     (fj_isQCDc==1) |
     (fj_isQCDcc==1) |
     (fj_isQCDlep == 1) |
     (fj_isQCDothers == 1) ) & (fj_genRes_mass<0) ) |
     (fj_isTop == 1) |
     (fj_isToplep==1) |
     ( ( (fj_H_WW_4q==1) | (fj_H_WW_elenuqq==1) | (fj_H_WW_munuqq==1) | (fj_H_WW_taunuqq==1) ) &
     (fj_maxdR_HWW_daus<2.0) & (fj_nProngs>1) & (fj_genRes_mass>0) ))

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: (pfcand_pt_log_nopuppi!=0)
   sv_mask: (sv_pt_log!=0)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - pfcand_etarel
         - pfcand_phirel
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - pfcand_etarel
         - pfcand_phirel
         - [pfcand_abseta, 0.6, 1.6]
         - pfcand_charge
         - pfcand_isEl
         - pfcand_isMu
         - pfcand_isGamma
         - pfcand_isChargedHad
         - pfcand_isNeutralHad
         - [pfcand_VTX_ass, 4, 0.3]
         - pfcand_lostInnerHits
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]

   pf_mask:
      length: 100
      vars: 
         - pfcand_mask
   sv_points:
      length: 7
      vars:
         - sv_etarel 
         - sv_phirel
   sv_features:
      length: 7
      vars:
         - [sv_pt_log, 4, 0.6]
         - [sv_mass, 1.2, 0.3]
         - sv_etarel
         - sv_phirel
         - [sv_abseta, 0.5, 1.6]
         - [sv_ntracks, 3, 1]
         - [sv_normchi2, 0.8, 0.6]
         - [sv_dxy, 0.4, 0.25]
         - [sv_dxysig, 7, 0.02]
         - [sv_d3d, 0.5, 0.2]
         - [sv_d3dsig, 7, 0.02]
   sv_mask:
      length: 7
      vars:
         - sv_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   # type: simple
   # value: [
   #    label_H_bb, label_H_cc, label_H_qq,
   #    label_QCD_bb, label_QCD_cc, label_QCD_b, label_QCD_c, label_QCD_others,
   #    ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   type: custom
   value: 
      target_mass: np.maximum(1, np.where(fj_genRes_mass>0, fj_genRes_mass, fj_genjetmsd))

observers:
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_msoftdrop
   - fj_lsf3
   - fj_genjetmsd
   - fj_genjetmass
   - fj_genRes_mass
   - fj_genRes_pt 
   - fj_isQCDb
   - fj_isQCDbb
   - fj_isQCDc
   - fj_isQCDcc
   - fj_isQCDlep
   - fj_isQCDothers
   - fj_isTop
   - fj_isToplep
   - fj_H_WW_4q
   - fj_H_WW_elenuqq
   - fj_H_WW_munuqq
   - fj_H_WW_taunuqq
   - fj_nProngs
   - fj_evt_met_pt

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
      fj_genjetmsd: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260]
   reweight_classes: [fj_isQCDb, fj_isQCDbb, fj_isQCDc, fj_isQCDcc, fj_isQCDlep, fj_isQCDothers, fj_H_WW_4q, fj_H_WW_elenuqq, fj_H_WW_munuqq, fj_H_WW_taunuqq]
   class_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
   reweight_threshold: 15
   reweight_hists: