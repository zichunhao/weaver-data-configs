treename:
    Events

selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    >
    (fj_pt>300) &
    (fj_pt<2500) &
    (fj_msoftdrop>=30) &
    (fj_msoftdrop<260) &
    ((fj_isQCDb==1) |
     (fj_isQCDbb==1) |
     (fj_isQCDc==1) |
     (fj_isQCDcc==1) |
     (fj_isQCDlep == 1) |
     (fj_isQCDothers == 1) |
     ((fj_H_WW_4q==1) & (fj_maxdR_HWW_daus<2.0)) |
     ((fj_H_WW_elenuqq==1) & (fj_maxdR_HWW_daus<2.0)) |
     ((fj_H_WW_munuqq==1) & (fj_maxdR_HWW_daus<2.0)) |
     ((fj_H_WW_taunuqq==1) & (fj_maxdR_HWW_daus<2.0)) )
test_time_selection:
    ### selection to apply at test time (i.e., when running w/ --predict)
    >
    (fj_pt>300) &
    (fj_pt<2500) &
    (fj_msoftdrop>=30) &
    (fj_msoftdrop<260) &
    ((fj_isQCDb==1) |
     (fj_isQCDbb==1) |
     (fj_isQCDc==1) |
     (fj_isQCDcc==1) |
     (fj_isQCDlep == 1) |
     (fj_isQCDothers == 1) |
     ((fj_genH_mass==125) &
      (((fj_H_WW_4q==1) & (fj_maxdR_HWW_daus<2.0)) |
       ((fj_H_WW_elenuqq==1) & (fj_maxdR_HWW_daus<2.0)) |
       ((fj_H_WW_munuqq==1) & (fj_maxdR_HWW_daus<2.0)) |
       ((fj_H_WW_taunuqq==1) & (fj_maxdR_HWW_daus<2.0)) )))

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
    sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
    # Background (Top)
    fj_isTop_merged: (fj_isTop==1) & (fj_nProngs==3)
    fj_isTop_semimerged: (fj_isTop==1) & (fj_nProngs==2)
    fj_isToplep_merged: (fj_isToplep==1) & (fj_nProngs>=2)  # so that you have at least the lepton and the b merged in the leptonic case
    # Signal (HWW)
    fj_isHWW_elenuqq_merged: (fj_H_WW_elenuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==4)
    fj_isHWW_elenuqq_semimerged: (fj_H_WW_elenuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==3)
    fj_isHWW_munuqq_merged: (fj_H_WW_munuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==4)
    fj_isHWW_munuqq_semimerged: (fj_H_WW_munuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==3)
    fj_isHWW_taunuqq_merged: (fj_H_WW_taunuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==4)
    fj_isHWW_taunuqq_semimerged: (fj_H_WW_taunuqq==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==3)
    fj_H_WW_4q_3q: (fj_H_WW_4q==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==3)
    fj_H_WW_4q_4q: (fj_H_WW_4q==1) && (fj_maxdR_HWW_daus<=0.8) & (fj_nProngs==4)


preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    ### [note]: `[var]_mask` will not be transformed even if `method=auto`
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:  # TODO: update this if needed (copied from ak15hww4q_points_pf_sv_mass_decorr.yaml)
    pf_points:
        length: 100
        vars:
        - pfcand_etarel
        - pfcand_phirel
    pf_features:
        length: 100
        vars:
        ### [format 1]: var_name (no transformation)
        ### [format 2]: [var_name,
        ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
        ###              multiply_by(optional, default=1),
        ###              clip_min(optional, default=-5),
        ###              clip_max(optional, default=5),
        ###              pad_value(optional, default=0)]
        - [pfcand_pt_log_nopuppi, 1, 0.5]
        - [pfcand_e_log_nopuppi, 1.3, 0.5]
        - pfcand_etarel
        - pfcand_phirel
        - [pfcand_abseta, 0.6, 1.6]
        - pfcand_charge
        - [pfcand_VTX_ass, 4, 0.3]
        - pfcand_lostInnerHits
        - [pfcand_normchi2, 5, 0.2]
        - [pfcand_quality, 0, 0.2]
        - [pfcand_dz, 0, 180]
        - [pfcand_dzsig, 0, 0.9]
        - [pfcand_dxy, 0.0, 300]
        - [pfcand_dxysig, 0, 1.0]
    pf_mask:
        length: 100
        vars:
        - pfcand_mask
    sv_points:
        length: 7
        vars:
        - sv_etarel
        - sv_phirel
    sv_features:
        length: 7
        vars:
        - [sv_pt_log, 4, 0.6]
        - [sv_mass, 1.2, 0.3]
        - sv_etarel
        - sv_phirel
        - [sv_abseta, 0.5, 1.6]
        - [sv_ntracks, 3, 1]
        - [sv_normchi2, 0.8, 0.6]
        - [sv_dxy, 0.4, 0.25]
        - [sv_dxysig, 7, 0.02]
        - [sv_d3d, 0.5, 0.2]
        - [sv_d3dsig, 7, 0.02]
    sv_mask:
        length: 10
        vars:
        - sv_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value: [
        fj_isQCDb, fj_isQCDbb, fj_isQCDc, fj_isQCDcc, fj_isQCDlep, fj_isQCDothers,
        fj_isTop_merged, fj_isTop_semimerged,
        fj_isToplep_merged, fj_isWlep,
        fj_H_bb, fj_H_cc, fj_H_qq,
        fj_H_WW_4q_3q, fj_H_WW_4q_4q,
        fj_isHWW_elenuqq_merged, fj_isHWW_elenuqq_semimerged,
        fj_isHWW_munuqq_merged, fj_isHWW_munuqq_semimerged,
        j_isHWW_taunuqq_merged, fj_isHWW_taunuqq_semimerged,
        fj_H_tt_elenuhad, fj_H_tt_munuhad, fj_H_tt_hadhad,
    ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    # type: custom
    # value:
       # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:  # TODO: Update this if needed (copied from ak15hww4q_points_pf_sv_mass_decorr.yaml)
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_msoftdrop
   - fj_deepTagMD_H4qvsQCD
   - fj_deepTag_HvsQCD
   - fj_dR_W
   - fj_dR_Wstar
   - fj_PN_H4qvsQCD
   - fj_mindR_HWW_daus
   - fj_maxdR_HWW_daus
   - fj_genH_mass
   - fj_genW_mass
   - fj_genWstar_mass
   - fj_genW_pt
   - fj_genWstar_pt
   - fj_genW_decay
   - fj_genWstar_decay

weights:  # TODO: Update this if needed (adapted from ak15hww4q_points_pf_sv_mass_decorr.yaml)
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [300, 380, 481, 658, 770, 974, 1233, 1561, 1975, 2500]
      fj_msoftdrop: [-10000, 10000]
   reweight_classes:
       [fj_isQCDb, fj_isQCDbb, fj_isQCDc, fj_isQCDcc, fj_isQCDlep, fj_isQCDothers,
       fj_isTop_merged, fj_isTop_semimerged, fj_isToplep_merged, fj_isWlep,
       fj_H_WW_4q_3q, fj_H_WW_4q_4q, ffj_isHWW_elenuqq_merged, fj_isHWW_elenuqq_semimerged,
       fj_isHWW_munuqq_merged, fj_isHWW_munuqq_semimerged, fj_isHWW_taunuqq_merged, fj_isHWW_taunuqq_semimerged,
       fj_H_tt_elenuhad, fj_H_tt_munuhad, fj_H_tt_hadhad]
   # reweight_classes: [fj_isQCD, fj_H_WW_4q, fj_H_WW_elenuqq, fj_H_WW_munuqq] #,fj_isTop]
   class_weights: [1, 0.33, 0.33, 0.33] #, 1]
   reweight_hists:
